setwd("~/Dropbox/git/uva-2022/r-workshop")
### Load packages by calling them from the library.
library(foreign)
library(readstata13)
## Let's take the natural log of 100.
## Like most things, R gives users at least a couple means to accomplish a task.
log(100, base=10)
log(100, 10)
## Let's generate a numeric vector.
c(1, 2, 3, 4)
1:4
10:4000
seq(1, 4)
-1:2
seq(2, 8, by = 2)
seq(0, 1, length = 5)
seq(0, 42, length = 6)
rep(42, 3)
rep(c(1, 2, 3), 10)
## Now let's generate some character vectors.
c("Germany", "France", "Spain", "Italy")
rep(rep(c('fish', 'bird'), c(2, 1)), 100)
## Finally, let's create some logical vectors.
c(TRUE, FALSE, TRUE, FALSE)
rep(c(F, T))
as.numeric(c(TRUE, FALSE, TRUE, FALSE))
## By now, you have probably noticed that R commands often take the form 'x()'.
## These commands are called functions. We will use them a lot.
## R has built-in help for functions. You can call this help in two ways.
help(rep)
?rep
## Now we know how to create data. We often want to reuse it.
## R is "object-oriented" meaning variables, data frames, models, outputs are all stored as objects in working memory.
## So, we need to assign the data to variables. We use '<-' to do that.
## Some people use '=', but this practice is discouraged.
variable.name <- c(1, 2, 3)
another.variable.name <- rep(c(1, 2), 100)
twos <- rep(2, 100)
## We can call variables by typing their name.
variable.name
twos
## We can also perform operations on variables.
another.variable.name*5
another.variable.name/twos
random.numbers <- rnorm(mean = 0, sd = 1, n = 1000) # what does rnorm do?
random.numbers
summary(random.numbers)
random.numbers.2 <- rbinom(n = 500, trials = 10, prob = 0.3) # what does rbinom do?
table(random.numbers.2)
random.numbers.3 <- runif(min = 0, max = 1, n = 500) # what does runif do?
summary(random.numbers.3)
## You often want to visually inspect variables.
random.numbers
View(random.numbers.3)
## Sometimes you want to view specific observations.
random.numbers[500]
random.numbers[900:920]
## Sometimes you want to view the beginning of the vector . . .
head(random.numbers)
## Sometimes you want to view the beginning of the vector . . .
head(random.numbers, 10)
## Sometimes you want to view the beginning of the vector . . .
head(random.numbers, 20)
## . . . or the end of the vector.
tail(random.numbers)
## . . . or the end of the vector.
tail(random.numbers, 20)
## Determine your current working directory (i.e. where you are working in the file system).
getwd()
## List files in that directory.
list.files()
## Change your working directory to your data directory.
setwd("/Users/cdcrabtree/Dropbox/git/uva-2022/r-workshop")
## Change your working directory to your data directory.
setwd("/Users/cdcrabtree/Dropbox/git/uva-2022/r-works")
## Let's import and view some data - first a .csv file.
data.csv <- read.csv("justices.csv", header = TRUE, sep = ",",)
read.csv("justices.csv", header = TRUE, sep = ",",)
View(data.csv)
## How do we view just the beginning of the data?
head(data.csv)
tail(data.csv)
## For importing Excel files, we need the 'gdata' package.
install.packages("gdata")
## For importing STATA files, we need the 'foreign' package.
install.packages("foreign")
install.packages("foreign")
## Now let's generate some character vectors.
c("Germany", "France", "Spain", "Italy")
rep(rep(c('fish', 'bird'), c(2, 1)), 100)
## Finally, let's create some logical vectors.
c(TRUE, FALSE, TRUE, FALSE)
rep(c(F, T))
as.numeric(c(TRUE, FALSE, TRUE, FALSE))
## Or we can use 'rio' to import EVERYTHING.
install.packages("rio") # Leeper (http://thomasleeper.com/) does awesome work.
install.packages("rio")
## Now we enable the packages.
## They are not enabled by default, so we need to enable them for each session we use them.
library(gdata)
library(foreign)
library(rio)
## We are now ready to go back to importing data.
## For instance, we can import an Excel file ...
data.xsl <- read.xls(("justices.xls"), sheet = 1, header = FALSE)
View(data.xsl)
## and a STATA file.
data <- rio::import("justices.dta")
View(data)
## We can even import data directly from the internet.
police <- read.csv("https://raw.githubusercontent.com/BuzzFeedNews/2015-12-fatal-police-shootings/master/guardian.csv")
View(police)
## First, let's list all objects in the working environment
ls()
## That is a lot. Let's remove an object from the working environment.
rm("data.csv")
ls()
## Say we want to start our session with a clean slate, but we want to save police first.
save(police, file = "police.rda")
list.files()
## Or maybe we want to save everything in the current environment.
save.image(file = "everything.rda")
list.files()
## Then we remove all the objects.
rm(list = ls())
ls()
## This leaves libraries attached, however. Sometimes you might want to detach libraries.
## One reason for this is because libraries can occasionally conflict.
unloadNamespace("rio")
## Let's import some data again.
justices <- read.csv("justices.csv")
View(justices)
View(justices)
load
## Or we can import our saved file.
load("everything.rda")
## Now let's explore the dataset.
names(justices)
dim(justices)
nrow(justices)
ncol(justices)
dim(justices)[1]
dim(justices)[2]
summary(justices)
## We can look at one variable. To do this, we use the '$' operator
justices$justiceName
table(justices$justiceName)
summary(justices$justiceName)
## We can also look at specific rows and columns of data.
justices[, 1]
justices[1, ]
## Or at individual datum.
justices[1, 1]
## Or at specific columns and rows of data.
justices[2:3, 4:5]
## We can also use 'which' to look at specific observations.
justices[which(justices$term > 2000), ]
## We can also use 'which' to look at specific observations.
recent.df <- justices[which(justices$term > 2000), ]
justices[which(justices$justice == 112), ]
justices[which(justices$post_mn < 0), ]
## It is sometimes useful to determine how long vectors are.
length(justices$term)
## Or to figure out the unique number of observations in a vector.
length(unique(justices$term))
length(unique(justices$judge))
length(unique(justices$justiceName))
justices$justiceName <- tolower(justices$justiceName)
justices$justiceName
## Now we will use a new package to retrieve a different set of summary statistics.
## We want to use the package 'Hmisc' - how do we install and load it?
install.packages("Hmisc")
library(Hmisc)
describe(justices)
## We can more directly view a variable's class.
class(justices$justiceName)
justices$justiceName <- as.character(justices$justiceName)
## Or levels.
levels(justices$justiceName)
## Let's create a new dummy variable for all observations where justices have a post_mn greater than 0.
justices$dummy <- 0
justices$dummy[justices$post_mn > 0] <- 1
table(justices$dummy)
## Now let's create some basic graphics by examining data$enps in greater detail
hist(data$post_mn, col='slategray2', xlab="Ideology", ylab="Frequency", main="Histogram of Judicial Ideology",
font.main = 1, border = "white")
## Now let's create some basic graphics by examining data$enps in greater detail
hist(data$post_mn, col='slategray2', xlab="Ideology", ylab="Frequency", main="Histogram of Judicial Ideology",
font.main = 1, border = "white")
plot(density(data$post_mn), col='red', lwd=3, xlab="Ideology", ylab="Density", main="Kernel Density Plot of Ideology",
font.main = 1, bty='n')
